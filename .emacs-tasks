;;;;;;;;;;;;;;;;;;;;;;;;; Functionality I want to add ;;;;;;;;;;;;;;;;;;;;;;;;;;
; Add the ability to have DOING , TODO , etc. If i add a DOING, the lost DOING
;  Becomes TODO.
; Make it easy to complete or defer tasks with other keystrokes, would require 
;  multiple WM Keybinds.
; Refactor the code to stop repeating
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Define Functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer 
          (delq (current-buffer) 
                (remove-if-not 'buffer-file-name (buffer-list)))))
(defun reload-tasks ()
  "Function to reload .emacs-tasks, used during devel"
  (interactive)
  (load-file "~/Code/emacs-tasks/.emacs-tasks"))

(defun tasks-prepare-top ()
  "This function will jump to a specified line, newline it and then put a * TODO
   line in and get ready for input"
  (interactive)
  (switch-to-buffer "biglist.org")
  (delete-other-windows)
  (goto-line work-line)
  (setq mystr (buffer-substring (point-at-bol) (point-at-eol)))
  (cond ((string= mystr "* DOING ") (move-end-of-line 1))
	((string= mystr "")
	 (move-beginning-of-line 1)
	 (kill-line)
	 (newline)
	 (goto-line work-line)
	 (insert "* DOING "))
	((string-match "^ +$" mystr) ;tests for 1 or more blank spaces only
	 (move-beginning-of-line 1)
	 (kill-line)
	 (newline)
	 (goto-line work-line)
	 (insert "* DOING "))
	(t
	 (move-beginning-of-line 1)
	 (newline)
	 (goto-line work-line)
	 (insert "* DOING ")))
  (goto-line (+ 1 work-line))
  (setq mystr2 (buffer-substring (point-at-bol) (point-at-eol)))
  (if (and (string-match "\* DOING " mystr2) (string-match "\* DOING ." mystr))
      (org-todo "TODO"))
  (goto-line work-line)
  (move-end-of-line 1)
  (save-buffer))

(defun tasks-save-n-go ()
  "Push the current task down, add a new DOING, then save the whole file. Finally, detach the screen, thus killing the xterm :D"
  (interactive)
  (tasks-prepare-top)
  (save-buffer)
  (shell-command "screen -D emacs-tasks"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Set Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq work-line 8) ;set what line you will be entering your task
(setq org-todo-keywords '((sequence "DO" "DOING" "TODO" "|" "DONE" "DELETED")))
(setq org-todo-keyword-faces
      '(("DOING" . (:foreground "yellow" :weight bold))
	("TODO" . (:foreground "magenta"))
	("DELETED" . (:foreground "grey"))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Set Hotkeys ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c s") 'tasks-save-n-go)
(global-set-key (kbd "C-c c") 'tasks-prepare-top)
; the following keybinds are for when emacs is in an xterm, shift + direction
; keys return ESC [ 1 ; 2 bla  for some reason (reason is found in ECMA-48)
(global-set-key (kbd "ESC [ 1 ; 2 D") (kbd "<S-left>"))
(global-set-key (kbd "ESC [ 1 ; 2 C") (kbd "<S-right>"))
(global-set-key (kbd "ESC [ 1 ; 2 A") (kbd "<S-up>"))
(global-set-key (kbd "ESC [ 1 ; 2 B") (kbd "<S-down>"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Do Procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(find-file "~/org/biglist.org")
(switch-to-buffer "biglist.org")
(tasks-prepare-top)
(load-file "/home/quazimodo/Code/emacs-tasks/screen.el")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Test Stuff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun foo ()
  "This function makes the entire document read only, except for a space on
the work line. It is problematic as I still cant apply functions properly..."
  (interactive)
  ;find the point that indicates the end of the 1st read only region
  (goto-line work-line)
  (setq mystr (buffer-substring (point-at-bol) (point-at-eol)))
  (if (string-match "\* [A-Z]+ " mystr)
      (progn
	(setq readonly-region1-end (- (+ (point) (match-end 0)) 1)))
    (setq readonly-region1-end nil))
  ;find the point that indicates the start of the 2nd read only region
  (goto-line (+ work-line 1))
  (setq readonly-region2-start (- (point) 1))
  ;set read only regions
  (if readonly-region1-end
      (add-text-properties (point-min) readonly-region1-end '(read-only t)))
  (add-text-properties readonly-region2-start (point-max) '(read-only t)))