;;;;;;;;;;;;;;;;;;;;;;;;; Functionality I want to add ;;;;;;;;;;;;;;;;;;;;;;;;;;
; Make input line have "* ADD " & refactor to store this string in a variable
; Make working line have a "* DOING " by default
; Fix the prepare-top to have the ability to understand this
; Add the ability to have DOING , TODO , etc. If i add a DOING, the lost DOING
;  Becomes TODO.
; Make it easy to complete or defer tasks with other keystrokes, would require 
;  multiple WM Keybinds.
; Refactor the code to stop repeating
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Define Functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer 
          (delq (current-buffer) 
                (remove-if-not 'buffer-file-name (buffer-list)))))
(defun reload-tasks ()
  "Function to reload .emacs-tasks, used during devel"
  (interactive)
  (load-file "~/Code/emacs-tasks/.emacs-tasks"))

(defun tasks-prepare-top ()
  "This function will jump to a specified line, newline it and then put a * DO
   line in and get ready for input"
  (interactive)
;  (switch-to-buffer "biglist.org")
  (delete-other-windows)
  (goto-line work-line)
  (setq mystr (buffer-substring (point-at-bol) (point-at-eol)))
  (cond ((string= mystr "* NEXT STEP ") (move-end-of-line 1))
        ((string= mystr "")
         (move-beginning-of-line 1)
         (kill-line)
         (newlbine)
         (goto-line work-line)
         (insert "* NEXT STEP "))
        ((string-match "^ +$" mystr) ;tests for 1 or more blank spaces only
         (move-beginning-of-line 1)
         (kill-line)
         (newline)
         (goto-line work-line)
         (insert "* NEXT STEP "))
        (t
         (move-beginning-of-line 1)
         (newline)
         (goto-line work-line)
         (insert "* NEXT STEP ")))
  (goto-line (+ 1 work-line))
  (if (string-match "\* NEXT STEP ." mystr)
      (org-todo "TODO"))
  (setq mystr2 (buffer-substring (point-at-bol) (point-at-eol)))
  (goto-line (+ 2 work-line))
  (if (and (string-match "\* TODO " mystr2) 
           (string-match "\* NEXT STEP ." mystr))
      (org-todo "TODO"))
  (goto-line work-line)
  (move-end-of-line 1)
  (save-buffer))

(defun tasks-save-n-go ()
  "Push the current task down, add a new DOING, then save the whole file. Finally, detach the screen, thus killing the xterm :D"
  (interactive)
  (tasks-prepare-top)
  (save-buffer)
  (shell-command "screen -D emacs-tasks"))

(defun tasks-toggle-done ()
  "Finish task on the current line and save it at the bottom as 'DONE'"
  (interactive)
  (setq mystr (buffer-substring (point-at-bol) (point-at-eol)))
  (cond ((string-match "^\** TODO " mystr) (org-todo "DONE"))
        ((string-match "^\** DONE " mystr) (org-todo "TODO"))))

(defun smishy-test()
  (print (org-get-todo-state))
  (org-todo))
(defun tasks-done-last ()
  "Function to close the last task put on the stack and then
   create a new one or set the second last one to DOING"
  ;first delete the last task
  (interactive)
  (goto-line (+ work-line 1))
  (move-beginning-of-line 1)
  (kill-whole-line)
  (tasks-prepare-top))
(defun tasks-set-max-priority()
  "Set the line to have the maximum priority"
  (let* ((marker (or (org-get-at-bol 'org-hd-marker)
                     (org-agenda-error)))
         (buffer (marker-buffer marker)))
    (with-current-buffer buffer
      (save-excursion
        (save-restriction
          (widen)
          (goto-char marker)
          (org-back-to-heading t)
          (org-priority 65))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Set Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq work-line 9) ;set what line you will be entering your task
(setq org-todo-keywords '((sequence "NEXT STEP" "DOING" "TODO" "PROJECT" "DEFERRED" "DELEGATED" "REF" "NOTE" "|" "DONE" "DELETED")))
(setq org-todo-keyword-faces
      '(("DO" . (:foreground "black" :background "brightyellow"))
        ("DOING" . (:foreground "black" :background "yellow"))
        ("TODO" . (:foreground "white" :background "magenta"))
        ("PROJECT" . (:foreground "black" :background "color-82"))
        ("DEFERRED" . (:foreground "black" :background "color-130"))
        ("DELEGATED" . (:foreground "black" :background "color-86"))
        ("REF" . (:foreground "black" :background "grey"))
        ("NOTE" . (:foregroud "red" :background "color-125"))
        ("DONE" . (:foreground "color-52" :background "brightwhite"))
        ("DELETED" . (:foreground "brightred" :background "color-88"))))
(custom-set-faces
 '(org-tag ((t (:foreground "color-16" :background "color-82"))))
 '(org-level-1 ((t (:foreground "white"))))
 '(org-special-keyword ((t (:foreground "brightmagenta" :background "color-17")))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Set Hotkeys ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c s") 'tasks-save-n-go)
(global-set-key (kbd "C-c c") 'tasks-prepare-top)
(global-set-key (kbd "C-c d") 'tasks-toggle-done)
(global-set-key (kbd "C-c l") 'tasks-done-last)
(global-set-key (kbd "C-c C-l") 'org-store-link)
(global-set-key (kbd "C-c C-c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-iswitchb)
(global-set-key (kbd "C-c t") (lambda () (interactive) (org-todo-list "TODO")))
(global-set-key (kbd "C-c n") (lambda () (interactive) (org-agenda-list 14)))
(global-set-key (kbd "C-c h") (lambda () (interactive) (org-agenda nil "h")))
; (global-set-key (kbd "C-c C-h") (lambda () (interactive) (smishy-test)))
; the following keybinds are for when emacs is in an xterm, shift + direction
; keys return ESC [ 1 ; 2 bla  for some reason (reason is found in ECMA-48)
(global-set-key (kbd "ESC [ 1 ; 2 D") (kbd "<S-left>"))
(global-set-key (kbd "ESC [ 1 ; 2 C") (kbd "<S-right>"))
(global-set-key (kbd "ESC [ 1 ; 2 A") (kbd "<S-up>"))
(global-set-key (kbd "ESC [ 1 ; 2 B") (kbd "<S-down>"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Do Procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(find-file "~/org/biglist.org")
(switch-to-buffer "biglist.org")
(tasks-prepare-top)
(load-file "/home/quazimodo/Code/emacs-tasks/screen.el")
;;;;;;;;;;;;;;;;;;;;;; Set After Org Load Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-face-foreground 'org-tag "color-235")
(org-agenda-file-to-front "~/org/biglist.org")
(setq org-agenda-custom-commands
        (append org-agenda-custom-commands
                '(("h" "2 week agenda, DONE and TODOs"
                   ((agenda "" ((org-agenda-start-on-weekday nil)))
                    (todo "DONE")
                    (todo "DOING")
                    (todo "TODO"))))))
(setq org-lowest-priority 69)
(setq org-default-priority 68)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Test Stuff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun foo ()
  "This function makes the entire document read only, except for a space on
the work line. It is problematic as I still cant apply functions properly..."
  (interactive)
  ;find the point that indicates the end of the 1st read only region
  (goto-line work-line)
  (setq mystr (buffer-substring (point-at-bol) (point-at-eol)))
  (if (string-match "\* [A-Z]+ " mystr)
      (progn
        (setq readonly-region1-end (- (+ (point) (match-end 0)) 1)))
    (setq readonly-region1-end nil))
  ;find the point that indicates the start of the 2nd read only region
  (goto-line (+ work-line 1))
  (setq readonly-region2-start (- (point) 1))
  ;set read only regions
  (if readonly-region1-end
      (add-text-properties (point-min) readonly-region1-end '(read-only t)))
  (add-text-properties readonly-region2-start (point-max) '(read-only t)))
